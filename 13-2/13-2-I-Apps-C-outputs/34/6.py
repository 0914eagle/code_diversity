
def solve(a, b, l, r):
    # Initialize the string with the first a lowercase English letters
    s = "".join(chr(i + ord('a')) for i in range(a))

    # Mister B's opponent's algorithm
    def opponent_algorithm(suffix):
        # Create a set of letters that appear in the suffix
        letter_set = set(suffix)
        # Generate a string of length a with distinct letters that don't appear in the suffix
        t = "".join(chr(i + ord('a')) for i in range(a) if chr(i + ord('a')) not in letter_set)
        return t

    # Mister B's algorithm
    def mister_b_algorithm(suffix):
        # Generate a string of length b with distinct letters that don't appear in the suffix
        t = "".join(chr(i + ord('a')) for i in range(b) if chr(i + ord('a')) not in suffix)
        return t

    # Initialize the number of different letters in the segment as the number of letters in the suffix
    num_different_letters = len(set(s[l-1:r]))

    # Iterate through the string and apply the algorithms
    for i in range(l-1, r):
        # Get the suffix of length a starting from position i
        suffix = s[i:i+a]
        # Get the string generated by Mister B's opponent's algorithm
        t = opponent_algorithm(suffix)
        # Get the string generated by Mister B's algorithm
        t_mister_b = mister_b_algorithm(suffix)
        # Update the number of different letters in the segment
        num_different_letters = min(num_different_letters, len(set(s[l-1:r] + t_mister_b)))
        # Append the string generated by Mister B's opponent's algorithm to the end of the string
        s += t

    return num_different_letters

